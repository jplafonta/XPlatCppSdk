#pragma once

#include "PlayFabGlobal_c.h"
#include "PlayFabClientDataModels_c.h"

/// <summary>
/// User handle returned from successful Client Login calls. Contains auth context needed to make PlayFab requests.
/// Must be release by clients with PlayFabUserCloseHandle when no longer needed.
/// </summary>
typedef struct PlayFabUser* PlayFabUserHandle;

struct PlayFabLoginResult
{
    PlayFabUserHandle userHandle;
    time_t* lastLoginTime;
    bool newlyCreated;
};

/// <summary>
/// Signs the user in using a custom unique identifier generated by the title. A successful sign in attempt returns
/// a PlayFabUserHandle which can be used to make future PlayFab API calls.
/// </summary>
/// <param name="stateHandle">PlayFabStateHandle returned from PlayFabInitialize call.</param>
/// <param name="request">Populated request object.</param>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// If successful, call <see cref="PlayFabLoginWithCustomIDGetResult"/> to get the result.
/// </remarks>
HRESULT PlayFabLoginWithCustomIDAsync(
    _In_ PlayFabStateHandle stateHandle,
    _In_ const PlayFabLoginWithCustomIDRequest* request,
    _In_ XAsyncBlock* async
) noexcept;

/// <summary>
/// Get the async result of a successful PlayFabLoginWithCustomIDAsync call.
/// </summary>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <param name="handle">Opaque result handle.</param>
/// <param name="result">Pointer to the result object.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// The lifetime of the result object is tied to the result handle. When the result is no longer needed, call
/// PlayFabResultCloseHandle to release the result object.
/// </remarks>
HRESULT PlayFabLoginWithCustomIDGetResult(
    _In_ XAsyncBlock* async,
    _Out_ PlayFabResultHandle* handle,
    _Out_ PlayFabLoginResult** result
) noexcept;

/// <summary>
/// Duplicate a user handle.
/// </summary>
/// <param name="userHandle">PlayFabUserHandle to duplicate.</param>
/// <param name="duplicatedHandle">Pointer to duplicated handle.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT PlayFabUserDuplicateHandle(
    _In_ PlayFabUserHandle userHandle,
    _Out_ PlayFabUserHandle* duplicatedHandle
) noexcept;

/// <summary>
/// Close a user handle. If it is the last handle, the underlying User object will be destroyed.
/// </summary>
/// <param name="userHandle">PlayFabUserHandle to close.</param>
/// <returns>Result code for this API operation.</returns>
void PlayFabUserCloseHandle(
    _In_ PlayFabUserHandle userHandle
) noexcept;
